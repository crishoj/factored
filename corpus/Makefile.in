# 
# Makefile for factored MT corpora
# 
# OBJECTIVE: Let GNU's make handle the dependency chain for 
# constructing factored MT corpora, including updating files
# when their dependencies have been updated with newer versions.
#
# AUTHOR: crjensen@hum.ku.dk
#
# NOTE: Expects environment variable L to contain a language code
# for the desired language
#

# Arguments from environment
L		?= @L1@
OL		?= @L2@
PREFIX 		?= @PREFIX@
DEV_SENTS	?= @DEV_SENTS@
TEST_SENTS	?= @TEST_SENTS@
LM_SUFFIX	?= @LM_SUFFIX@

# Derived variables
PWD 		= $(shell pwd)
PAIR 		= $(shell basename $(PWD))
CLUSTER_PATHS 	= clusters/$(L)/$(PREFIX)-c1000-p1.out/paths
DEPPARSE 	= ../../../stacked_dep/data/$(L)/europarl-$(PAIR)/mst2.out.conll

LM	    	= train/$(PREFIX).$(LM_SUFFIX)
LEMMA_LM    	= train/$(PREFIX).lemma.$(LM_SUFFIX)
POS_LM	    	= train/$(PREFIX).pos.$(LM_SUFFIX)
DEPREL_LM  	= train/$(PREFIX).deprel.$(LM_SUFFIX)
CLUSTER_LM  	= train/$(PREFIX).cluster.$(LM_SUFFIX)
WSD_LM	    	= train/$(PREFIX).wsd.$(LM_SUFFIX)

LMS 		= $(LM) $(LEMMA_LM) $(POS_LM) $(CLUSTER_LM) $(DEPREL_LM) $(WSD_LM)

FACTOR_TOOL 	= ../../bin/factor
SPLIT		= ../../bin/split.sh

CSTLEMMA 	= /opt/cstlemma/cstlemma
CSTLEMMA_OPTS 	= -t- -b '$$w' -B '$$w' -c '$$b1[[$$b?]~1$$B]$$s' -f /opt/cstlemma/da/flexrules -d /opt/cstlemma/da/dict 

LEMMAGEN 	= /nyusers/anders/stemmers/v2/lemmagen/binary/linux/lemmatize
LEMMAGEN_OPTS 	= -f wpl

SRILM_OPTIONS 	= -order 3 -interpolate -kndiscount -unk 
SRILM_OPTIONS2 	= -order 3 -interpolate 

.DELETE_ON_ERROR : # don't leave half-baked files around

.SECONDARY : # keep "intermediate" files (for reuse)

.PHONY : lms clean-lms factored unfactored

%.tok.$(L) : %.raw.$(L)
	tokenizer.perl -l $(L) < $< > $@

%.tok.$(OL) : %.raw.$(OL)
	tokenizer.perl -l $(OL) < $< > $@

%.clean.$(L) %.clean.$(OL) : %.tok.$(L) %.tok.$(OL)
	clean-corpus-n.perl $*.tok $(L) $(OL) $*.clean 1 40

%.clean.$(L) : %.lowercased.$(L)
	lowercase.perl < $< > $@

%.lowercased.$(L) : %.clean.$(L)
	lowercase.perl < $< > $@

%.da.lemma : %.lowercased.da 
	$(CSTLEMMA) $(CSTLEMMA_OPTS) -i $< -o $@

%.lemma : %.lemmatize.out
	 $(FACTOR_TOOL) --trace col_to_spl --col 2 --fallback 1 $< --output $@

%.en.lemmatize.out : %.en.wpl
	rm -f $@
	$(LEMMAGEN) $(LEMMAGEN_OPTS) -l /nyusers/anders/stemmers/v2/data/lemmatizer/lem-me-en.bin $< $@

%.de.lemmatize.out : %.de.wpl
	rm -f $@
	$(LEMMAGEN) $(LEMMAGEN_OPTS) -l /nyusers/anders/stemmers/v2/data/lemmatizer/lem-m-ge.bin $< $@

%.$(L).wpl : %.lowercased.$(L)
	$(FACTOR_TOOL) --trace spl_to_wpl $< --output $@

$(PREFIX).pos $(PREFIX).deprel : $(DEPPARSE)
	$(FACTOR_TOOL) --trace conll_extract $< --output-pos $(PREFIX).pos --output-deprel $(PREFIX).deprel

$(CLUSTER_PATHS) : $(PREFIX)
	mkdir -p clusters/$(L)
	wcluster --text $(PREFIX) --c 1000 --ms-per-line 1000

%.cluster : % $(CLUSTER_PATHS)
	$(FACTOR_TOOL) cluster_extract --output $@ $^

%.factored : % %.lemma %.pos %.cluster %.deprel %.wsd
	$(FACTOR_TOOL) combine $^ --output $@

%.wsd.context : %.lemma %.pos
	$(FACTOR_TOOL) --trace prepare_wsd --output $@ --before 0 --after 0 $^

%.wsd.output : %.wsd.context
	../../parallelize --output $@ --chunks=16 --granularity=2 --nice=10 -- ukb_wsd -D ../../wsd/$(L)/dict.txt -K ../../wsd/$(L)/rels.bin --ppr {$<}

%.wsd : %.lemma %.wsd.output
	$(FACTOR_TOOL) --trace wsd_extract $^ --output $@

# Binary LM for memory mapping with KenLM
%.kblm : %.lm
	build_binary $< $@

%.lm : %
	ngram-count $(SRILM_OPTIONS2) -text $< -lm $@

train/%.$(L) : %.$(L)
	$(SPLIT) $(DEV_SENTS) $(TEST_SENTS) $<

dev/% : %
	$(SPLIT) $(DEV_SENTS) $(TEST_SENTS) $<

test/% : %
	$(SPLIT) $(DEV_SENTS) $(TEST_SENTS) $<

lms : $(LMS)

clean-lms : 
	rm -rf $(LMS)

factored : $(PREFIX).factored.$(L) train/$(PREFIX).factored.$(L)
unfactored : train/$(PREFIX).$(L)

$(PREFIX).factored.$(L) : $(PREFIX).$(L).factored
	rm -f $@
	ln -s $< $@

all : lms factored unfactored 