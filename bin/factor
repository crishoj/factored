#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

require 'iconv'
require 'conll'
require 'commander/import'

program :version, '0.1'
program :description, 'Assist in translation factor juggling.'

default_command :help

command :split do |c|
  c.syntax = 'factor split CORPUS'
  c.description = 'Split a factored corpus into separate, unfactored corpora'
  c.option '--skip N', Integer, 'Numbers of factors to skip (e.g. to skip the surface form)'
  c.option '--factors f1,f2,...', 'Names of the factors'
  c.action do |args, options| 
    options.default :skip => 0
    corpus = args.first
    say "Reading factored corpus from #{corpus}"
    outputs = options.factors.split(/,/).collect do |factor| 
      output = "#{corpus}.#{factor}"
      say "Writing #{factor} factors to #{output}"
      File.open(output, 'w') 
    end
    File.foreach(corpus) do |line| 
      factor_sents = line.chomp.split(/ /).collect { |tok| tok.split('|') }.transpose
      options.skip.times do factor_sents.shift end
      outputs.each do |output|
        output << (factor_sents.first * ' ') + "\n"
        factor_sents.shift
      end
    end
    outputs.each do |output|
      output.close
    end
  end
end

command :combine do |c|
  c.syntax = 'factor combine CORPUS FACTOR1, FACTOR2, ... [options]'
  c.description = 'Combine various translation factors into a factored corpus'
  c.option '--output FILE', 'Where to put the factored corpus'
  c.action do |args, options|
    corpus = args.shift
    factor_inputs = args.collect do |filename| 
      say "Reading factors from #{filename}"
      File.open(filename, 'r')
    end
    say "Writing factored corpus to #{options.output}"
    output = File.open(options.output, 'w')
    File.foreach(corpus) do |line|
      factors = factor_inputs.collect { |f| f.gets.chomp.split(' ') }
      line.chomp.split(' ').each do |form|
        token_factors = [form] + factors.collect { |f| f.shift }
        output << token_factors.join('|') + ' '
      end
      # End of sentence
      output << "\n"
    end
  end
end

command :conll_extract do |c|
  c.syntax = 'factor conll_extract CONLL [options]'
  c.description = 'Extract translation factors (POS and DEPREL) from a CONLL parse'
  c.option '--output-pos FILE', 'Where to put the POS tags'
  c.option '--output-deprel FILE', 'Where to put the DEPRELs'
  c.action do |args, options|
    conll = args.first
    say "Reading CONLL file #{conll}"
    say "Writing POS factors to #{options.output_pos}"
    say "Writing DEPREL factors to #{options.output_deprel}"
    pos_output = File.open(options.output_pos, 'w')
    deprel_output = File.open(options.output_deprel, 'w')
    File.foreach(conll) do |line|
      line.chomp!
      if line.empty?
        pos_output << "\n"
        deprel_output << "\n"
      else
        tok = Conll::Token.parse(line)
        pos_output << tok.pos
        pos_output << ' '
        deprel_output << tok.deprel
        deprel_output << ' '
      end
    end
  end
end

command :cluster_extract do |c|
  c.syntax = 'factor cluster_extract CORPUS PATHS [options]'
  c.description = "Create a factor file with word clusters"
  c.option '--output FILE', 'Where to put the factor file'
  c.action do |args, options|
    corpus_file = args.first
    cluster_file = args.last
    say "Reading clusters from #{cluster_file}"
    clusters = {}
    clusters.default = '_'
    File.foreach(cluster_file) do |line|
      line.chomp!
      cluster, form, tmp = line.split("\t")
      clusters[form] = cluster
    end
    say "Writing output to #{options.output}"
    output = File.open(options.output, 'w')
    File.foreach(corpus_file) do |line|
      output << line.chomp.split(' ').collect { |form| clusters[form] }.join(' ') + "\n"
    end
  end
end

command :unsupos_extract do |c|
  c.syntax = 'factor unsupos_extract OUTPUT [options]'
  c.description = "Create a factor file with jUnsupos tags "
  c.option '--output FILE', 'Where to put the factor file'
  c.action do |args, options|
    tags_file = args.last
    say "Reading tags from #{tags_file}"
    say "Writing output to #{options.output}"
    output = File.open(options.output, 'w')
    File.foreach(tags_file) do |line|
      output << line.strip.split(" ").collect { |tok| tok.split('|').last }.join(' ') + "\n"
    end
  end
end

command :prepare_wsd do |c|
  c.syntax = 'factor prepare_wsd LEMMAS POS'
  c.description = 'Prepare a context file for word sense disambiguation.'
  c.option '--before N', Integer, 'Number of preceding sentences to include in the context'
  c.option '--after N',  Integer, 'Number of trailing sentences to include in the context'
  c.option '--output FILE', 'Where to put the context file'
  c.action do |args, options|
    options.default :before => 1, :after => 1
    pos_file = File.open(args[1], 'r') 
    output = File.open(options.output, 'w')
    sent_num = 0
    File.foreach(args.first) do |line|
      break if line.chomp.empty?
      sent_num += 1
      pos_tags = pos_file.gets.chomp.split(' ')
      id = 0
      ctrl = 1
      begin
        for_wsd = line.chomp.split(' ').collect { |lemma|
          id = id.succ
          pos = pos_tags.shift
          wsd_pos = case pos
                    when /^NN/, 'N'
                      'n' 
                    when /^VB/, 'V'
                      'v'
                    when /^JJ/
                      'a'
                    when /^RB/
                      'r'
                    when /^[CDEFILMPSTUWX\W]/, 'RP', 'A', 'RG'
                      next
                    else raise "Unhandled POS #{pos} (for lemma: #{lemma})"
                    end
          [lemma, wsd_pos, id, ctrl].join('#')
        }.compact
        unless for_wsd.empty?
          output << "ctx_#{sent_num}\n"
          output << for_wsd.join(' ')
          output << "\n"
        end
      rescue Exception => e
        warn "While processing line: #{line}"
        raise e
      end
    end
  end
end

command :spl_to_wpl do |c|
  c.syntax = 'factor spl_to_wpl SENTS --output OUTPUT'
  c.description = 'Convert a file in a sentence-per-line format to word-per-line'
  c.option '--output OUTPUT', "Where to put the output"
  c.when_called do |args, options|
    output = File.open(options.output, 'w')
    File.foreach(args.first) do |line|
      output << line.chomp.gsub(/ /, "\n")+"\n\n"
    end
  end
end

def fix_encoding(str)
  str = str.force_encoding('ISO-8859-1')
  %w{í ö ü ä ó é ú á Í Ö Ü Ä Ó É Ú Á ß}.each do |char|
    str.gsub!(Iconv.conv('ISO-8859-1', 'UTF-8', char), char.force_encoding('ISO-8859-1'))
  end
  str.force_encoding('UTF-8')
end

command :col_to_spl do |c|
  c.syntax = 'factor col_to_spl COLFILE --output OUTPUT'
  c.description = 'Extract a single column from a columnar file and save it in sentence-per-line format'
  c.option '--output OUTPUT', "Where to put the output"
  c.option '--col COL', Integer, "The column to extract, counting from 1"
  c.option '--fallback COL', Integer, "Column to fallback to if the extracted column is empty, counting from 1"
  c.when_called do |args, options|
    options.default :col => 1, :fallback => 1
    output = File.open(options.output, 'w')
    toks = []
    File.foreach(args.first) do |line|
      begin
        line.chop!
        if line == ""
          output << toks.join(' ') + "\n"
          toks = []
        else
          begin 
            cols = line.split(/\s+/)
          rescue ArgumentError => e
            begin
              cols = fix_encoding(line).split(/\s+/)
            rescue ArgumentError => e
              puts line.inspect
              line.chars.each do |char|
                puts "#{char} (#{char.inspect})"
              end
              raise e
            end
          end
          val = cols[options.col-1]
          val = cols[options.fallback-1] if val.nil? or val.empty?
          toks << val
        end
      end
    end
  end
end

class WSDOutput
  def initialize(filename)
    @file = File.open(filename)
  end
  def next
    line = @file.gets
    while line and line[0...2] == '!!' do
      line = @file.gets
    end
    line.chomp.split(/\s+/) if line
  end
end

command :wsd_extract do |c|
  c.syntax = 'factor wsd_extract LEMMAS SENSES [options]'
  c.description = "Create a factor file with word word senses"
  c.option '--output FILE', 'Where to put the factor file'
  c.action do |args, options|
    lemmas_file = args[0]
    sense_file = args[1]
    say "Using lemmas #{lemmas_file}"
    say "Reading senses from #{sense_file}"
    senses = WSDOutput.new(sense_file)
    say "Writing output to #{options.output}"
    output = File.open(options.output, 'w')
    cur_ctx_no = 0
    sense_ctx, id, sense = senses.next
    File.foreach(lemmas_file) do |line|
      cur_ctx_no += 1
      cur_ctx = "ctx_#{cur_ctx_no}"
      cur_id = "0"
      begin
        output << line.chomp.split(' ').collect { |lemma| 
          cur_id.succ!
          #say "id: #{id}, cur_id: #{cur_id}, sense_ctx: #{sense_ctx}, cur_ctx: #{cur_ctx}"
          if cur_ctx == sense_ctx and cur_id == id 
            #say " - using sense: #{sense}"
            ret = sense
            sense_ctx, id, sense = senses.next
          else
            # no word sense .. use lemma instead
            #say " - using lemma: #{lemma}"
            ret = lemma
          end 
          ret
        }.join(' ') + "\n"
      rescue ArgumentError => e 
        raise "Exception (#{e}) while processing line '#{line}'"
      end
    end
  end
end
