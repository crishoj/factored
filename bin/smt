#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

require 'commander/import'
require 'set'
require 'tempfile'

program :version, '0.1'
program :description, 'Tool belt for SMT experiments.'

default_command :help

command :gather_scores do |c|
  c.syntax = 'smt gather_scores BLEU1, BLEU2 [, ...]'
  c.description = 'Collect BLEU scores and gather them in a table'
  c.action do |args, options| 
    pairs = {}
    configs = Set.new
    args.each do |bleu_path|
      parts = File.dirname(bleu_path).split('/')
      config = parts.pop
      configs << config
      pair = parts.pop
      score = File.open(bleu_path).readline.split(/[= ,\/]+/)[1].to_f
      pairs[pair] ||= {} 
      pairs[pair][config] = score
    end
    configs = configs.sort
    puts ','+configs.join(',')
    pairs.each_pair do |pair,scores| 
      puts pair + ',' + configs.collect { |config| scores[config] }.join(',')
    end
  end
end

command :oracle do |c|
  c.syntax = 'smt oracle --reference REF_FILE SYSTEM1, SYSTEM2 [, ...]'
  c.description = 'For each sentence, pick the best-scoring output among several systems.'
  c.option '--reference FILE', 'File containing reference translations'
  c.option '--multi-bleu SCRIPT', 'Tool to use for scoring'
  c.action do |args, options|
    fail "Missing multi-bleu script" unless options.multi_bleu
    fail "Missing reference file" unless options.reference
    ref_sent_file = Tempfile.new(['ref', '.txt'])
    sys_sent_file = Tempfile.new(['sys', '.txt'])
    warn "Temp file for ref: #{ref_sent_file.path}" if $VERBOSE
    warn "Temp file for sys: #{sys_sent_file.path}" if $VERBOSE
    sys_outputs = args.collect { |f| File.open(f) }
    selects = Hash.new(0)
    File.foreach(options.reference) do |ref_sent|
      ref_sent_file.rewind
      ref_sent_file.truncate(0)
      ref_sent_file << ref_sent
      ref_sent_file.flush
      ref_len = ref_sent.split(' ').length
      best_score = 0
      best_sent = ''
      best_system = ''
      sys_outputs.each do |system_output|
        sys_sent = system_output.readline
        warn "Translation: #{sys_sent}" if $VERBOSE
        sys_sent_file.rewind
        sys_sent_file.truncate(0)
        sys_sent_file << sys_sent
        sys_sent_file.flush
        sys_len = sys_sent.split(' ').length
        cmd = "#{options.multi_bleu} #{ref_sent_file.path} < #{sys_sent_file.path}"
        warn "CMD: #{cmd}" if $VERBOSE
        output = `#{cmd}`
        ngram_scores = output.split(/[= ,\/]+/)[2..5].map(&:to_f)
        warn "ngram_scores: #{ngram_scores}" if $VERBOSE
        penalty = sys_len < ref_len ? Math.exp(1.0 - ref_len.to_f/sys_len.to_f) : 1.0
        warn "ref_len: #{ref_len}, sys_len: #{sys_len}, penalty: #{penalty}" if $VERBOSE
        score = ngram_scores.collect { |val| val > 0 ? Math.log(val) : 0 }.inject(0, :+)
        score = penalty * score
        warn "score: #{score}\n" if $VERBOSE
        if score >= best_score
          best_score = score
          best_system = system_output.path
          best_sent = sys_sent
        end
      end
      selects[best_system] += 1
      puts best_sent
    end
    warn selects
  end
end

command :group do |c|
  c.syntax = 'smt group --by=WHAT REF OUTPUT LOG'
  c.description = 'Group sentences by various properties, e.g. number of unknown words, extracted from the translation log'
  c.option '--by=WHAT', String, 'Discriminating property: unk, ...'
  c.action do |args, options|
    group_dir = "#{args[1]}.groups"
    ref_sents = File.new(args.shift).each
    out_sents = File.new(args.shift).each
    log = SMT::Log.new(args.shift)
    Dir.mkdir(group_dir) unless Dir.exists? group_dir
    group_dir += "/#{options.by}"
    fail "Group dir #{group_dir} exists" if Dir.exists? group_dir
    Dir.mkdir(group_dir)
    ref_group_files = {}
    out_group_files = {}
    log.each do |r|
      group_name = case options.by
      when 'unk'
        r.unknown_word_penalty < -1 ? 'unknowns' : 'no-unknowns'
      when 'unk-penalty'
        (0-r.unknown_word_penalty).to_i.to_s
      else
        fail "Don't know how to discriminate by '#{options.by}'"
      end
      unless out_group_files[group_name]
        out_group_filename = "#{group_dir}/#{group_name}.out"
        ref_group_filename = "#{group_dir}/#{group_name}.ref"
        warn "Creating group files #{out_group_filename} and #{ref_group_filename} for group #{group_name}"
        out_group_files[group_name] = File.new(out_group_filename, 'w')
        ref_group_files[group_name] = File.new(ref_group_filename, 'w')
      end
      out_group_files[group_name] << out_sents.next
      ref_group_files[group_name] << ref_sents.next
    end
  end
end

module SMT
  class Log
    attr_reader :header
    def initialize(filename = '')
      @filename = filename
      @header = iterator.first
      yield self if block_given?
      self
    end
    def iterator
      File.new(@filename).each("\nTranslating: ")
    end
    def each 
      records = iterator
      records.next # header
      records.each { |r| yield LogRecord.new(r) }
    end
  end
  class LogRecord
    def initialize(str) 
      lines = str.lines
      @input = lines.next.chomp
      re = /^BEST TRANSLATION: /
      line = lines.next.chomp
      line = lines.next.chomp until line.match(re)
      @output = line.sub(re, '')

      re = / *<<([-0-9., ]+)>> *$/
      @scores = @output.match(re)[1].split(', ').map(&:to_f)
      @output.sub!(re, '')

      re = / *\[total=([-0-9.]+)\] *$/
      @log_probability = @output.match(re)[1].to_f
      @output.sub!(re, '')
      
      re = / *\[([01]+)\] *$/
      @coverage = @output.match(re)[1].split('').collect { |s| s == '1' }
      @output.sub!(re, '')
    end
    def to_s
      puts "Input:\n#{@input}"
      puts "Output:\n#{@output}"
      puts "Scores:\n#{@scores}"
      puts "Unknown word penalty\n#{unknown_word_penalty}"
      puts "Log probability:\n#{@log_probability}"
      puts "Coverage:\n#{@coverage}"
    end
    def unknown_word_penalty
      @scores[2]
    end
  end
end